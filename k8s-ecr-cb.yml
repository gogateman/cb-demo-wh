# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Example usage: kubectl create -f <this_file>

# k8s template feature is in proposal state, otherwise this yaml could
# be created as a template. And it should be possible to pass the secrets
# through environment varibale.

apiVersion: v1
kind: Secret
metadata:
  name: ecrregistrykey
  namespace: cb
data:
  .dockerconfigjson: [Your base64 dockerconfigjson]
type: kubernetes.io/dockerconfigjson

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: redis
  namespace: cb
spec:
  replicas: 1
  template:
    metadata:
      labels:
        deploy: redis
    spec:
      containers:
      - name: redis
        image: [your-aws-acc].dkr.ecr.ap-southeast-1.amazonaws.com/cb-redis
        ports:
        - containerPort: 6379

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: nginx
  namespace: cb
spec:
  replicas: 2
  template:
    metadata:
      labels:
        deploy: nginx
    spec:
      containers:
      - name: nginx
        image: [your-aws-acc].dkr.ecr.ap-southeast-1.amazonaws.com/cb-nginx
        ports:
        - containerPort: 80

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: node
  namespace: cb
spec:
  replicas: 4
  template:
    metadata:
      labels:
        deploy: node
    spec:
      containers:
      - name: node
        image: [your-aws-acc].dkr.ecr.ap-southeast-1.amazonaws.com/cb-node
        ports:
        - containerPort: 8080

---
kind: Service
apiVersion: v1
metadata:
  labels:
    service: redis
  name: redis
  namespace: cb
spec:
  type: NodePort
  ports:
  - port: 6379
    targetPort: 6379
    nodePort: 30379
  selector:
    deploy: redis

---
kind: Service
apiVersion: v1
metadata:
  labels:
    service: nginx
  name: nginx
  namespace: cb
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 80
    nodePort: 30080
  selector:
    deploy: nginx

---
kind: Service
apiVersion: v1
metadata:
  labels:
    service: node
  name: node
  namespace: cb
spec:
  type: NodePort
  ports:
  - port: 8080
    targetPort: 8080
    nodePort: 32080
  selector:
    deploy: node
